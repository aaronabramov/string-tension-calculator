// @flow

import type {PhysicalString, Gauge} from '../types.js';

export const data: Array<PhysicalString> = [
  [0.008, 0.00001424],
  [0.0085, 0.000016075],
  [0.009, 0.000018022],
  [0.0095, 0.00002008],
  [0.01, 0.000022252],
  [0.0105, 0.000024531],
  [0.011, 0.000026925],
  [0.0115, 0.000029425],
  [0.012, 0.000032039],
  [0.0125, 0.000034765],
  [0.013, 0.000037605],
  [0.0135, 0.000040551],
  [0.014, 0.000043607],
  [0.015, 0.00005005],
  [0.016, 0.000056961],
  [0.017, 0.0000643],
  [0.018, 0.000072088],
  [0.019, 0.00008036],
  [0.02, 0.000089031],
  [0.021, 0.000098155],
  [0.022, 0.000107666],
  [0.023, 0.000117702],
  [0.024, 0.000124963],
  [0.025, 0.000136054],
  [0.026, 0.000144691],
  [0.027, 0.000153146],
  [0.028, 0.000161203],
  [0.029, 0.000178551],
  [0.031, 0.000198902],
  [0.033, 0.000223217],
  [0.035, 0.000249034],
  [0.037, 0.000276237],
  [0.039, 0.000304788],
  [0.041, 0.000334965],
  [0.043, 0.000366357],
  [0.045, 0.000404956],
  [0.047, 0.000447408],
  [0.049, 0.000475438],
  [0.051, 0.000512645],
  [0.053, 0.000551898],
  [0.055, 0.000584407],
  [0.057, 0.000625704],
  [0.059, 0.000679149],
  [0.061, 0.000720293],
  [0.063, 0.000765973],
  [0.065, 0.000821116],
  [0.067, 0.000870707],
  [0.07, 0.000939851],
  [0.073, 0.001021518],
  [0.076, 0.001110192],
  [0.079, 0.001188974],
  [0.082, 0.001293598],
  [0.086, 0.001416131],
  [0.09, 0.001544107],
  [0.094, 0.001677765],
  [0.098, 0.001831487],
  [0.102, 0.001986524],
  [0.106, 0.002127413],
  [0.11, 0.002286733],
  [0.114, 0.002449286],
  [0.118, 0.002616406],
  [0.124, 0.002880915],
  [0.13, 0.003154996],
  [0.136, 0.003441822],
  [0.142, 0.003741715],
  [0.148, 0.004051505],
  [0.154, 0.004375389],
  [0.16, 0.004712133],
  [0.168, 0.005204133],
  [0.176, 0.005691179],
  [0.184, 0.006219447],
  [0.192, 0.006742017],
  [0.2, 0.007409517],
  [0.208, 0.007875038],
  [0.216, 0.008477001],
  [0.226, 0.009397395],
  [0.236, 0.010222903],
  [0.246, 0.011082025],
  [0.256, 0.011969036],
  [0.266, 0.012897577],
].map(s => ({gauge: s[0], unitWeight: s[1]}));

export const findByGauge = (gauge: Gauge): PhysicalString => {
  const string = data.find(string => string.gauge === gauge);
  if (!string) {
    throw new Error(`could not find a string with the gauge: %{gauge}`);
  }
  return string;
};

export const findNext = (gauge: Gauge): ?PhysicalString => {
  return data.find(string => string.gauge > gauge);
};

export const findPrevious = (gauge: Gauge): ?PhysicalString => {
  for (let i = data.length - 1; i >= 0; i--) {
    if (data[i] && data[i].gauge < gauge) {
      return data[i];
    }
  }
};
